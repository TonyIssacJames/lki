diff --git a/P05_process_mm/cons_prod.c b/P05_process_mm/cons_prod.c
index 97ea7a1..a823f84 100644
--- a/P05_process_mm/cons_prod.c
+++ b/P05_process_mm/cons_prod.c
@@ -13,9 +13,11 @@
 #include <linux/delay.h>
 #include <linux/random.h>
 #include <linux/slab.h>
+#include <linux/semaphore.h>
 
 static struct task_struct *thread_cons[2], *thread_prod;
 static int thread_id[2];
+DEFINE_SEMAPHORE(jq_sem); //job queue semaphore, intialises to 1
 
 struct job 
 {
@@ -23,7 +25,8 @@ struct job
 	struct job* next;
 };
 
-static struct job* job_queue;
+static volatile struct job* job_queue = NULL; //initilisation
+static volatile int consumed_job_count = 0; //to trakc consumed job count
 
 static void process_job(void *thread_id, struct job* next_job)
 {
@@ -34,25 +37,33 @@ static void process_job(void *thread_id, struct job* next_job)
 		return;
 	}
 	id = *(int *)thread_id;
-	printk("\nThe data from the thread %u is %d\n",id, next_job->Mydata);
+	printk("\nThe data from the thread %u is %d processed = %d\n",id, next_job->Mydata, consumed_job_count);
 	get_random_bytes(&i, sizeof(i));
 	ssleep(i % 5);
 }
 
-void enqueue_job (struct job* new_job)
+int enqueue_job (struct job* new_job)
 {
 	static int i = 0;
 
+	if(down_interruptible(&jq_sem))
+		return -EINTR; //we cannot undo changes
+
 	new_job->next = job_queue;
 	job_queue = new_job;
 	job_queue->Mydata=i++;
+
+	up(&jq_sem);
+
 	printk("\n Job no %d is added.\n",i-1);
+	return 0;
 }
 
 int producer(void* arg)
 {
 	struct job *new_job;
 	unsigned int i;
+	int ret;
 
 	allow_signal(SIGKILL);
 
@@ -65,7 +76,10 @@ int producer(void* arg)
 			return -1;
 		}
 
-		enqueue_job(new_job);
+		ret = enqueue_job(new_job);
+		if (ret != 0)
+			return ret;
+
 		get_random_bytes(&i, sizeof(i));
 		ssleep(i % 5);
 		if (signal_pending(current))
@@ -85,15 +99,22 @@ static int thread_fn(void *thread_id)
 	while (!kthread_should_stop()) 
 	{
 		struct job* next_job;
+
+		if(down_interruptible(&jq_sem))
+			return -EINTR; //we cannot undo changes
+
 		if (job_queue == NULL)
 			next_job = NULL;
 		else
 		{
 			next_job = job_queue;
 			job_queue = job_queue->next;
+			consumed_job_count++;
 		}
+		up(&jq_sem);
+
 		if (next_job == NULL)
-			break;
+			continue;
 		process_job (thread_id, next_job);
 		kfree (next_job);
 		if (signal_pending(current))
@@ -111,6 +132,7 @@ static int __init init_consprod(void)
 	int i;
 	char buff[20];
 	struct job *new_job;
+	int ret;
 
 	for (i = 0; i < 6; i++) 
 	{
@@ -119,7 +141,10 @@ static int __init init_consprod(void)
 			printk("Failed to allocate the memory for job\n");
 			return -1;
 		}
-		enqueue_job(new_job);
+
+		ret = enqueue_job(new_job);
+		if (ret != 0)
+			return ret;
 	}
 
 	for (i = 0; i < 2; i++) 
